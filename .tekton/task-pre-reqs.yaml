---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: pre-reqs-task
spec:
  params:
    - name: git-access-token
      description: |
        (optional) token to access the git repository. If this token is provided, there will not be an attempt
        to use the git token obtained from the authorization flow when adding the git integration in the toolchain
      default: ""
    - name: repository
      description: the git repo url
    - name: branch
      description: the git branch
      default: master
    - name: pipeline-debug
      description: toggles debug mode for the pipeline
      default: "false"
    - name: continuous-delivery-context-secret
      description: Reference name for the secret resource
      default: "secure-properties"
  stepTemplate:
    env:
      - name: PIPELINE_DEBUG
        value: $(params.pipeline-debug)
  steps:
    - name: code-update-check
      image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.3
      workingDir: "/artifacts"
      imagePullPolicy: Always
      command: ["/bin/bash", "-c"]
      args:
        - |
          #!/bin/bash -e

          if [[ "${PIPELINE_DEBUG}" == "true" ]]; then
            pwd
            env
            trap env EXIT
            set -x
          fi

          if [[ ! -f manifest.json ]]; then
             echo "Missing manifest file to check updates"
             exit 0;
          fi 

          REMOTE_REPO=$(cat manifest.json | jq -r .repository)
          VERSION=$(cat manifest.json | jq -r .version)

          TMP_DIR=/tmp/pattern
          mkdir $TMP_DIR
          git clone "${REMOTE_REPO}" "${TMP_DIR}"

          REMOTE_VERSION=$(cat "${TMP_DIR}/manifest.json" | jq -r .version)

          echo "Remote version => ${REMOTE_VERSION}"
          echo "Local version => ${VERSION}"

          #Need to upgrade
          BRANCH="updates-v${REMOTE_VERSION}"
          if [[ "${VERSION}" != "${REMOTE_VERSION}" ]]; then
             git ls-remote --exit-code --heads origin "${BRANCH}"
             if [[ $? -eq 0 ]]; then
               echo "Remote branch already exists, not creating another branch and skipping updating"
               exit 0;
             fi 

             git remote add slz-upstream "${REMOTE_REPO}"
             git fetch slz-upstream
             git checkout -b "${BRANCH}"

             git config --global user.email "cdtektonpipeline@ibm.com"
             git config --global user.name "CD Tekton Pipeline"
             git merge remotes/slz-upstream/master --no-edit

             if [[ $? -ne 0 ]]; then
               echo "Merge was unsuccessful or there were merge conflicts.  Please refer to the documentation https://github.com/slzone/slzone-toolchain/blob/main/docs/markdowns/day2/code-upgrade.md on how to perform an upgrade by hand"
               exit 0;
             else 
               git push --set-upstream origin "${BRANCH}"
             fi
          fi

    - name: terraform-check
      image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.3
      workingDir: "/artifacts"
      imagePullPolicy: Always
      command: ["/bin/bash", "-c"]
      args:
        - |
          #!/bin/bash -e

          if [[ "${PIPELINE_DEBUG}" == "true" ]]; then
            pwd
            env
            trap env EXIT
            set -x
          fi

          echo "Verify that all inputs that need to be user defined are set"
          grep -w "<USER INPUT REQUIRED>" ./terraform/terraform.tfvars
          if [[ $? -eq 0 ]]; then
            echo "terraform.tfvars file contain variables that need user input.  Please change the variables that are set to <USER DEFINED INPUT> to an appropriate value"
            exit 1;
          fi

          # echo "Issuing terraform validation"
          # TF_DIR="/tmp"
          # TF_CMD="${TF_DIR}/terraform"
          # wget -q https://releases.hashicorp.com/terraform/1.0.10/terraform_1.0.10_linux_amd64.zip -O "${TF_CMD}.zip"
          # unzip -d "${TF_DIR}" -u "${TF_CMD}.zip"

          # cd /artifacts/terraform

          # echo "Issuing terraform init";
          # "${TF_CMD}" init;
          # "${TF_CMD}" validate

          # echo "CONTENTS ====>"
          # ls -altr
  workspaces:
    - name: artifacts
      mountPath: /artifacts
    - name: secrets
      mountPath: /secrets
  volumes:
    - name: secrets
      secret:
        secretName: $(params.continuous-delivery-context-secret)

